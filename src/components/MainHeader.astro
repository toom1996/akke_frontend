---
import { HEADER_COLUMNS } from '@/api/astroApi';
import IconLogo from '@/assets/icons/IconLogo.vue'
const dataProvider = await fetch(HEADER_COLUMNS).then((e) => {
    console.log(HEADER_COLUMNS)
    return e.json()
})
---

<style>
    .main-nav {
        @apply bg-black text-white rounded-full;
    }

    .drop-menu-container {
        /* @apply pb-12; */
        background: transparent;
        /* display: none; */
        opacity:0;
        left: 0;
        padding-block-start: 3rem;
        position: absolute;
        right: 0;
        top: calc(7.25rem - 3.125rem);
        transition: all .3s ease;
        z-index: 1;
    }

    .drop-menu-container[aria-expanded = "true"] {
        opacity:1;
    }

    .drop-menu-container[aria-expanded = "false"] {
        visibility: hidden;
    }

    .drop-mask {
        background-color: #000000b3;
        height: 100vh;
        /* pointer-events: none; */
        inset: 0;
        /* isolation: isolate; */
        opacity: 0;
        /* pointer-events: none; */
        position: fixed;
        top: var(--header-container-height);
        transition: all .3s ease;
        width: 100%;
        z-index: -1;
        visibility: hidden;
    }

</style>
<gogoex-header class="z-50 fixed w-full top-0" transition:persist >
    <div x-data="xDataProvider">
        <div id="dropOverlay" class="drop-mask"></div>
        <div :style="dropBackgroundStyles" id="dropBackground" class="t-0 absolute right-0 top-0 left-0 h-0 block w-full z-0 bg-white transition-all"></div>
        <div class="fixed top-4 z-50 inset-x-0">
            <div class="main-nav p-2 mx-auto ease-in-out transform transition-all duration-1000" id="header" :class="{ ' max-w-4xl ': !atTop, 'max-w-2xl': atTop }" @scroll.window.throttle="handleScroll">
                <div class="flex justify-center">
                    <div class="w-full mx-auto">
                        <div :class="{ ' p-4 ': !atTop, 'p-2': atTop }" class="relative flex flex-col w-full mx-auto ease-in-out transform transition-all duration-1000 bg-black shadow-thick backdrop-blur-xl backdrop-filter rounded-2xl md:rounded-full md:items-center md:justify-between md:flex-row p-4">
                            <a href="/" class="flex items-center justify-center font-bold cursor-pointer text-lg hover:text-lime-500"><IconLogo />GogoEx</a>
                            <ul class="flex h-full items-center">
                                {
                                    dataProvider.data.columns.map((item: { label: string, url: string, child: []}) => (
                                        <li class="mx-2 text-lg">
                                            <a id={item.child.length > 0 ? 'drop-' + item.url : ''} href={item.child.length > 0 ? 'javascript:void(0)' : item.url}  x-on:click="handleParentMenuClick($el)">
                                                <span class="font-semibold line">{item.label}</span>
                                            </a>
                                            {
                                                item.child.length > 0 ?
                                                <div id={item.child.length > 0 ? 'dropMenuContainer__drop-' + item.url : ''} class="drop-menu-container flex justify-center text-black" aria-expanded="false">
                                                    {
                                                        item.child.map((itemChild: { label: string, url: string, items: []}) => (
                                                            <div role="group" class="mx-8">
                                                                    <a class="mb-4 text-xl font-bold line" href={itemChild.url}>{itemChild.label}</a>
                                                                    {
                                                                        itemChild.items.map((v: {url: string, label: string}) => (
                                                                            <div class="my-2">
                                                                                <a class="line" href={v.url}>{ v.label }</a>
                                                                            </div>
                                                                        ))
                                                                    }
                                                            </div>
                                                        )) 
                                                    }
                                                </div>
                                                : ''
                                            }
                                        </li>
                                    ))
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</gogoex-header>
<script>
import Alpine from "alpinejs";
class Gogoex extends HTMLElement {
    constructor() {
    super();
    var scrollTimer: boolean = false
    document.addEventListener('alpine:init', () => {
        Alpine.data('xDataProvider', () => ({
                atTop: true,
                dropBackgroundStyles: {
                    height: '0px',
                    opacity: 1,
                    visibility: 'unset'
                },
                handleScroll () {
                    this.atTop = (window.scrollY  > 50 ? false : true)
                    if (scrollTimer === false) {
                        scrollTimer = true
                        setTimeout(() => {
                            this.atTop = (window.scrollY  > 50 ? false : true)
                            scrollTimer = false
                            console.log(window.scrollY );
                        }, 250)
                    }
                    // 处理滚动事件的逻辑，例如更新 Alpine.js 数据
                },
                handleParentMenuClick(el: Element) {
                    let currentDropedMenuId = 'dropMenuContainer__' + el.id

                    // 当前菜单的下拉菜单
                    var dropMenuEl = document.getElementById(currentDropedMenuId);

                    if (dropMenuEl) {
                        if (dropMenuEl.getAttribute('aria-expanded') == 'false') {
                            dropMenuEl.setAttribute('aria-expanded', 'true');
                            this.dropBackgroundStyles.height = `${dropMenuEl.offsetHeight + 128}px`
                            // dropBackgroundEl ? dropBackgroundEl.style.height = `${dropMenuEl.offsetHeight + 128}px` : ''
                            __setOpacity([dropOverlayEl, dropBackgroundEl, ], '1')

                            if (currentIsDropedMenuId && currentIsDropedMenuId !== currentDropedMenuId) {
                                let currentIsDropedMenuEl =  document.getElementById(currentIsDropedMenuId);
                                currentIsDropedMenuEl?.setAttribute('aria-expanded', 'false')
                            }

                            // 记录当前哪个是打开的
                            currentIsDropedMenuId = currentDropedMenuId
                            console.log(currentDropedMenuId)
                        } else {
                            dropMenuEl.setAttribute('aria-expanded', 'false')
                            __setOpacity([dropBackgroundEl, dropOverlayEl, ], '0')
                            dropBackgroundEl ? dropBackgroundEl.style.height = '0' : ''
                        }
                    }
                }
            }))
    })

    // 遮罩
        var dropOverlayEl = document.getElementById('dropOverlay');
        
        // 菜单背景
        var dropBackgroundEl = document.getElementById('dropBackground');
    
        document.addEventListener('astro:before-preparation', () => {
            let currentIsDropedMenuEl =  document.getElementById(currentIsDropedMenuId);
                            currentIsDropedMenuEl?.setAttribute('aria-expanded', 'false')
                            __setOpacity([dropBackgroundEl, dropOverlayEl, ], '0')
            console.log('astro:before')
        // document.querySelector('#loading').classList.add('show');
        });
        document.addEventListener('astro:after-preparation', () => {
        console.log('astro:after')
        // document.querySelector('#loading').classList.remove('show');
        });
    
        var ov = document.getElementById('dropOverlay');
        console.log(ov)
        if (ov) {
        let v = ov?.addEventListener('click', function () {
        console.log(currentIsDropedMenuId)
        document.getElementById(currentIsDropedMenuId)?.setAttribute('aria-expanded', 'false')
        __setOpacity([dropBackgroundEl, dropOverlayEl], '0')
        })
    
        console.log(v)
        }
    
        // document.getElementById('dropOverlay')?.addEventListener('click', function () {
        //     console.log(1231232)
        // })
        var currentIsDropedMenuId = ''
        var dropButton = document.querySelectorAll('[id^="drop-"]');
        console.log(dropButton)
    
        function __setOpacity(el: Array<HTMLElement | null>, opacityVal: string = '0') {
            el.forEach((e) => {
                if (e) {
                    e.style.opacity = opacityVal;
                    let visibilityVal = opacityVal == '0' ? 'hidden' : 'unset';
                    e.style.visibility = visibilityVal;
                }
            });
        }
}
}
  customElements.define('gogoex-header', Gogoex);
//      // 为我们的新 HTML 自定义元素定义行为。
//   class AstroHeart extends HTMLElement {
//     constructor() {
//       super();
//       let count = 0;

//       const heartButton = this.querySelector('button');
//       const countSpan = this.querySelector('span');

//         if (heartButton) {
//             // 每次单击按钮时，更新计数。
//             heartButton.addEventListener('click', () => {
//                 count++;
//                 if (countSpan) {
//                     countSpan.textContent = count.toString();
//                 }
//             });
//         }
//     }
//   }

//   // 告诉浏览器将我们的 AstroHeart 类用于 <astro-heart> 元素。
//   customElements.define('astro-heart', AstroHeart);
//   customElements.define('gogoex-header', Nav);
    
</script>